# data_inserter.py
import psycopg2
import time
import random
from datetime import date, timedelta

# --- –®–ê–ì 1: –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ config.py ---
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ.
try:
    from config import DATABASE_URI
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URI.")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª config.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç: DATABASE_URI = '...'")
    exit()

def add_new_order():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞, –µ–≥–æ –¥–µ—Ç–∞–ª–µ–π –∏ –ø–ª–∞—Ç–µ–∂–∞.
    """
    conn = None
    try:
        # --- –®–ê–ì 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º URI ---
        # psycopg2 –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å URI, –Ω–æ –µ–º—É –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —á–∞—Å—Ç—å "+psycopg2",
        # –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SQLAlchemy. –ú—ã –µ–µ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º.
        db_uri = DATABASE_URI.replace('postgresql+psycopg2', 'postgresql')
        
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(db_uri)
        cur = conn.cursor()

        # --- –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ (FK) ---
        cur.execute("SELECT customerNumber FROM classicmodels.customers;")
        customer_numbers = [row[0] for row in cur.fetchall()]

        cur.execute("SELECT productCode FROM classicmodels.products;")
        product_codes = [row[0] for row in cur.fetchall()]

        cur.execute("SELECT MAX(orderNumber) FROM classicmodels.orders;")
        new_order_number = cur.fetchone()[0] + 1

        # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—Ç–∞–±–ª–∏—Ü–∞ orders) ---
        random_customer = random.choice(customer_numbers)
        order_date = date.today()
        required_date = order_date + timedelta(days=random.randint(7, 21))
        order_status = random.choice(['In Process', 'On Hold', 'Shipped']) # –î–æ–±–∞–≤–∏–º –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ —Å—Ç–∞—Ç—É—Å—ã

        # --- –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü—É `orders` ---
        order_query = """
        INSERT INTO classicmodels.orders (orderNumber, orderDate, requiredDate, status, customerNumber)
        VALUES (%s, %s, %s, %s, %s);
        """
        cur.execute(order_query, (new_order_number, order_date, required_date, order_status, random_customer))
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #{new_order_number} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ #{random_customer} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{order_status}'.")

        # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ `orderdetails` ---
        total_order_amount = 0
        products_in_order = random.sample(product_codes, k=random.randint(1, 4)) # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
        
        for i, product_code in enumerate(products_in_order):
            quantity_ordered = random.randint(10, 50)
            price_each = round(random.uniform(20.0, 250.0), 2)
            order_line_number = i + 1
            total_order_amount += quantity_ordered * price_each

            details_query = """
            INSERT INTO classicmodels.orderdetails (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber)
            VALUES (%s, %s, %s, %s, %s);
            """
            cur.execute(details_query, (new_order_number, product_code, quantity_ordered, price_each, order_line_number))
            print(f"   - –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä {product_code} (x{quantity_ordered}) –≤ –∑–∞–∫–∞–∑.")

        # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ `payments` ---
        check_number = f"PY{random.randint(100000, 999999)}"
        payment_date = order_date + timedelta(days=random.randint(0, 3))
        # –°–¥–µ–ª–∞–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π - —á–∞—Å—Ç—å –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
        amount = round(total_order_amount * random.uniform(0.8, 1.1), 2) 

        payment_query = """
        INSERT INTO classicmodels.payments (customerNumber, checkNumber, paymentDate, amount)
        VALUES (%s, %s, %s, %s);
        """
        cur.execute(payment_query, (random_customer, check_number, payment_date, amount))
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–ª–∞—Ç–µ–∂ {check_number} –Ω–∞ —Å—É–º–º—É ${amount:.2f} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ #{random_customer}.")

        # --- –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
        conn.commit()
        print("--- –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. ---")

        cur.close()

    except (Exception, psycopg2.Error) as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL: {error}")
        if conn:
            conn.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    finally:
        if conn is not None:
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.\n")


if __name__ == '__main__':
    print("üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω.")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    while True:
        add_new_order()
        sleep_time = random.uniform(5, 20)
        print(f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {sleep_time:.2f} —Å–µ–∫—É–Ω–¥...")
        time.sleep(sleep_time)
