# backfill_data.py
import psycopg2
import random
from datetime import date, timedelta
import time

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ config.py ---
try:
    from config import DATABASE_URI
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URI.")
    exit()

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ì–ï–ù–ï–†–ê–¶–ò–ò ---
START_YEAR = 2006
END_YEAR = 2024 # –ú—ã –∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞

def backfill_historical_data():
    """
    –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤.
    """
    conn = None
    try:
        db_uri = DATABASE_URI.replace('postgresql+psycopg2', 'postgresql')
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(db_uri)
        cur = conn.cursor()

        # --- –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
        cur.execute("SELECT customerNumber FROM classicmodels.customers;")
        customer_numbers = [row[0] for row in cur.fetchall()]

        cur.execute("SELECT productCode FROM classicmodels.products;")
        product_codes = [row[0] for row in cur.fetchall()]

        cur.execute("SELECT MAX(orderNumber) FROM classicmodels.orders;")
        current_order_number = cur.fetchone()[0]

        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å {START_YEAR} –ø–æ {END_YEAR} –≥–æ–¥...")

        # --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ –≥–æ–¥–∞–º –∏ –º–µ—Å—è—Ü–∞–º ---
        for year in range(START_YEAR, END_YEAR + 1):
            for month in range(1, 13):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 5 –¥–æ 20)
                orders_this_month = random.randint(5, 20)
                
                print(f"   -> –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {orders_this_month} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è {year}-{month:02d}...")

                for _ in range(orders_this_month):
                    current_order_number += 1
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å –≤ –º–µ—Å—è—Ü–µ
                    day = random.randint(1, 28) # –ò—Å–ø–æ–ª—å–∑—É–µ–º 28, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ñ–µ–≤—Ä–∞–ª–µ–º
                    order_date = date(year, month, day)
                    required_date = order_date + timedelta(days=random.randint(7, 21))
                    random_customer = random.choice(customer_numbers)
                    status = 'Shipped' # –í—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏

                    # 1. –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
                    order_query = "INSERT INTO classicmodels.orders (orderNumber, orderDate, requiredDate, status, customerNumber) VALUES (%s, %s, %s, %s, %s);"
                    cur.execute(order_query, (current_order_number, order_date, required_date, status, random_customer))

                    # 2. –í—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                    products_in_order = random.sample(product_codes, k=random.randint(1, 4))
                    total_order_amount = 0
                    for i, product_code in enumerate(products_in_order):
                        quantity = random.randint(10, 50)
                        price = round(random.uniform(20.0, 250.0), 2)
                        total_order_amount += quantity * price
                        details_query = "INSERT INTO classicmodels.orderdetails (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber) VALUES (%s, %s, %s, %s, %s);"
                        cur.execute(details_query, (current_order_number, product_code, quantity, price, i + 1))
                    
                    # 3. –í—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
                    check_number = f"BKF{random.randint(100000, 999999)}"
                    amount = round(total_order_amount * random.uniform(0.9, 1.0), 2)
                    payment_query = "INSERT INTO classicmodels.payments (customerNumber, checkNumber, paymentDate, amount) VALUES (%s, %s, %s, %s);"
                    cur.execute(payment_query, (random_customer, check_number, order_date, amount))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            conn.commit()
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {year} –≥–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

        print("\nüéâ –í—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

    except (Exception, psycopg2.Error) as error:
        print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        if conn:
            conn.rollback()
    finally:
        if conn is not None:
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")


if __name__ == '__main__':
    backfill_historical_data()
